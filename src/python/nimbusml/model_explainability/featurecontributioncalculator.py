# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
FeatureContributionCalculator
"""

__all__ = ["FeatureContributionCalculator"]


from sklearn.base import TransformerMixin

from ..base_transform import BaseTransform
from ..internal.core.model_explainability.featurecontributioncalculator import \
    FeatureContributionCalculator as core
from ..internal.utils.utils import trace


class FeatureContributionCalculator(
        core, BaseTransform, TransformerMixin):
    """
    **Description**
        For each data point, calculates the contribution of individual features to the model prediction.

    :param feature: see `Columns </nimbusml/concepts/columns>`_.

    :param columns: see `Columns </nimbusml/concepts/columns>`_.

    :param predictor_model: The predictor model to apply to data.

    :param top: Number of top contributions.

    :param bottom: Number of bottom contributions.

    :param normalize: Whether or not output of Features contribution should be
        normalized.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            predictor_model,
            top=10,
            bottom=10,
            normalize=True,
            feature=None,
            columns=None,
            **params):

        if 'feature_column' in params:
            raise NameError(
                "'feature_column' must be renamed to 'feature'")
        if feature:
            params['feature_column'] = feature
        if columns:
            params['columns'] = columns
        BaseTransform.__init__(self, **params)
        core.__init__(
            self,
            predictor_model=predictor_model,
            top=top,
            bottom=bottom,
            normalize=normalize,
            **params)
        self.feature = feature
        self._columns = columns

    def get_params(self, deep=False):
        """
        Get the parameters for this operator.
        """
        return core.get_params(self)
