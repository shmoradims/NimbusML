# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------------------------------------
# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
FeatureContributionCalculator
"""

__all__ = ["FeatureContributionCalculator"]


from ...entrypoints.transforms_featurecontributioncalculationtransformer import \
    transforms_featurecontributioncalculationtransformer
from ...utils.utils import trace
from ..base_pipeline_item import BasePipelineItem, DefaultSignatureWithRoles


class FeatureContributionCalculator(
        BasePipelineItem,
        DefaultSignatureWithRoles):
    """
    **Description**
        For each data point, calculates the contribution of individual features to the model prediction.

    :param predictor_model: The predictor model to apply to data.

    :param top: Number of top contributions.

    :param bottom: Number of bottom contributions.

    :param normalize: Whether or not output of Features contribution should be
        normalized.

    :param params: Additional arguments sent to compute engine.

    """

    @trace
    def __init__(
            self,
            predictor_model,
            top=10,
            bottom=10,
            normalize=True,
            **params):
        BasePipelineItem.__init__(
            self, type='transform', **params)

        self.predictor_model = predictor_model
        self.top = top
        self.bottom = bottom
        self.normalize = normalize

    @property
    def _entrypoint(self):
        return transforms_featurecontributioncalculationtransformer

    @trace
    def _get_node(self, **all_args):
        algo_args = dict(
            feature_column=self._getattr_role(
                'feature_column',
                all_args),
            predictor_model=self.predictor_model,
            top=self.top,
            bottom=self.bottom,
            normalize=self.normalize)

        all_args.update(algo_args)
        return self._entrypoint(**all_args)
